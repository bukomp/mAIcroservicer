〔Task〕[📣SALIENT❗️: NO INCLUSION OF GUIDES, TUTORIALS, INSTRUCTIONS, SPECIFIC ENDPOINT DESCRIPTIONS, OR SOFTWARE CONFIGURATIONS.]〔/Task〕

〔Task〕[📣REQUIRED_FILES❗️: MANDATORY COMPONENTS]
Design a microservices-based system as a software architect. Outline the file structure and explain each file's role and function. Keep it simple and intuitive for developers. Only include essential files. Note: Only the file tree and file descriptions are needed, not the source code.
〔/Task〕

〔Task〕[📣EXAMPLE❗️: STANDARDIZED SOURCE CODE TREE FORMAT]
Provided file tree structure is just a template and must not be taken as is.
Main file must be named "main.py" and its contents must never be imported by other files.
All file trees must adhere to this format:

---structure---
{project name}/
├── app/
├── └── {app logic and other possible folders}
├── tests/
│   └── {unit tests}
├── {general project and additional files}
├── Dockerfile
├── requirements.txt
├── main.py
├── API.md
└── README.md

〔/Task〕

〔Task〕[📣EXAMPLE❗️: CODE MODULE ORGANIZATION SCHEMA]
{func:return_type}: Functions
[var:type]: Local variables
<lib:component>: Libraries and library imports
^origin_file.file_extension-import^: Imported functions or variables from other files of the project, path to origin_file must not be specified

Indicate file and library imports, variables and functions in the file tree like this:

---structure---
{project name}/
├── app/
│ ├── {file name} {function:return_type}[variable:type]<library:component>^origin_file.extension-import^

〔/Task〕

〔Task〕[📣EXAMPLE❗️: STRICT OUTPUT TEMPLATE]
For each file in the project, provide a detailed explanation of its purpose and functionality. 
All file descriptions must adhere to this format:

---{filename}---
{File Description}
Imports:
{library name}:(components){description}
Variables:
{variable}{type}:{description}
Functions:
{function name}():{return type}
{description}

List all functions, variables, and imports in each file. Make sure to mention all functions and variables that are meant for export. If a file has no functions or variables, omit those sections. Folders should not be included. Failure to follow this format will result in immediate disqualification from the project.
〔/Task〕

〔Task〕[📣EXAMPLE❗️: STRICT RESPONSE FORMAT]
Omit the introductory and concluding sentences from your answer, like: 'Certainly! Here's the file structure for a microservices system, along with explanations for each file.' and 'I hope this clarifies each component's role in the microservices design.'
You must finish message with "---"!
〔/Task〕